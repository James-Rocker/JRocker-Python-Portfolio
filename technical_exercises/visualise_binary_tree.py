"""
Find a solution to the binary tree problem was kinda boring
You take a list of numbers, if the highest value goes on one side and the lower on the other
It's an imperfect tree and requires manual manipulation of the node order

Ironically, formatting it in the easiest way to read, results in the user making the tree
"""


class Node(object):
    """
    simple Node object, each object in the tree output is a Node
    While this isn't best practice to have a class with no public methods
    I like having it as a class
    """

    def __init__(self, node_value, left=None, right=None):
        self.value = node_value
        self.left = left
        self.right = right


def output_tree(node: Node, level: int = 0):
    """
    throwaway function, essentially just exists to take node arguments and
    print out the values according to the spacing and arrows
    """
    # level is generated by the loop with the console right-most printing first
    if node is not None:
        output_tree(node.left, level + 1)
        spacing = (
            " " * 7 * level
        )  # calculating it here because it helps clarity on the fstring print statement
        print(f"{spacing} -> {node.value}")
        output_tree(node.right, level + 1)


node_tree = Node(
    1,
    left=Node(2, left=Node(12, left=Node(7)), right=Node(9)),
    right=Node(3, left=Node(5), right=Node(6)),
)

output_tree(node_tree)
